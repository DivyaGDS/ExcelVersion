#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

DecompressExcel(){

echo "in post merge"

# File path
properties_file="./src/main/resources/excelversioncontrol.properties"

# Latest version of excel version control library
exceljarversion=1.0.5

# Keys in Property File
excelversioncontrolEnable="excelversioncontrol_enable"
excelname="excelversioncontrol_filepath"
versioncontrolType="excelversioncontrol_type"
allExcel="excelversioncontrol_allexcel"

# Variable to hold the Property Value
prop_value=""
getProperty()
{
prop_key=$1
prop_value=`cat ${properties_file} | grep ${prop_key} | cut -d'=' -f2`
}

#Get the property value
getProperty ${excelversioncontrolEnable}
excelversioncontrolEnable=${prop_value}
getProperty ${excelname}
excelname=${prop_value}
getProperty ${versioncontrolType}
versioncontrol=${prop_value}
getProperty ${allExcel}
allExcel=${prop_value}

if [[ $excelversioncontrolEnable == "true" ]];then

# Get the list of files staged for commit and check if it an excel
#filesList=($(git diff --name-only --cached))
# Get the list of files merged and check if it is an excelDecompressedFolder
filesList=($(git diff ORIG_HEAD HEAD --name-only))

if [[ $allExcel == "no" ]];then
IFS=','
read -a excelList <<<"$excelname"
fi

for i in ${!filesList[@]}; do
echo "filelist.."${filesList[$i]}
done

finalSourceFoldercsv=()
for i in ${!filesList[@]}; do
            sourceFile=./${filesList[$i]}
            destFile=${sourceFile/Converted.csv/.xlsx}
           # echo "source file.."$sourceFile
            #echo "dest file.."$destFile

             #if([[  $destFile  =~  ${filesList[$i]}  ]]); then
             #echo "test"
             #fi
if ([[ ${filesList[$i]} =~ "Converted.csv" ]]); then
          finalSourceFoldercsv+=(${filesList[$i]})


          #IFS=','
           # read -a excelListMatch <<<"${excelList[*]///}"
         # for i in ${!excelListMatch[@]}; do
            #  echo "excel match.."${excelListMatch[$i]}
             # echo "original excel.."${excelList[$i]}
          #done

          newdestFolder=${destFolder///}
          destFolder=./excelversioncontrol/${newdestFolder/./}
fi
done


for i in ${!finalSourceFoldercsv[@]}; do
echo "final source folder csv.."${finalSourceFoldercsv[i]}
done

for i in ${!finalSourceFoldercsv[@]}; do
 if ([[ $allExcel == "yes" ]]) || ([[ $allExcel == "no" ]] && [[ ${excelList[*]} =~ ${finalSourceFolder[i]}.xlsx ]]); then
	    if [[ $versioncontrol == "xml" ]];then
  		 sourceFolder=./${finalSourceFolder[$i]}DecompressedFolder
		destFile=./${finalSourceFolder[i]}.xlsx
		method="Compression"
  		echo "Source File Excel is $sourceFolder"
		echo "Dest folder is $destFile"
		            echo "method.."$method
		    # Compile and run the ExcelDecompression
      #  java -cp ~/.m2/repository/com/ey/excel-version-control/$exceljarversion/excel-version-control-$exceljarversion.jar excelHelper.ExcelHelper $method $sourceFile $destFolder
       # git add $destFolder
	  elif [[ $versioncontrol == "csv" ]];then
	      if [[ ! -d "excelversioncontrol" ]];then
      	        mkdir "excelversioncontrol"
      	fi
		    sourceFile=./${finalSourceFoldercsv[$i]}
		    destFolder=${sourceFile/Converted.csv/.xlsx}
		    destFolder=${destFolder/excelversioncontrol\/}

        read -a excelListMatch <<<"${filesList[*]///}"
#		    if [[  $destFolder  =~  ${filesList[*]}  ]]); then
#		      echo "inside iiifff"
#		    fi

		      for i in ${!filesList[@]}; do
		        newfile=${filesList[$i]//\/}
#		        echo "new file--"./$newfile
                      #echo "excel match.."${excelListMatch[$i]}
                      #echo "original excel.."${filesList[$i]}
                       if ([[ $destFolder =~ ./$newfile ]]); then
                                destFolder=./${filesList[$i]}
                                echo "workkkking.."
#                                echo "original--"./${filesList[$i]}
                       fi
                  done



		    method="ConvertToExcel"
		     echo "source file---"$sourceFile
            echo "dest file---"$destFolder
           # echo "method---"$method

		   # Compile and run the ExcelToCSVConvertion
		    java -cp ~/.m2/repository/com/ey/excel-version-control/$exceljarversion/excel-version-control-$exceljarversion.jar excelHelper.ExcelHelper $method $sourceFile $destFolder

#        java -cp ~/src/test/resources/jarfile/excel-version-control-1.0.5.jar excelHelper.ExcelHelper $method $sourceFile $destFolder
	      #git add $destFolder
	      git add $destFile
        git commit --amend 'success' $destFile --no-verify
        git push --force
        currentbranch=($(git branch â€“show-current))
        echo $currentbranch
        	 # git merge $currentbranch
        	 # SKIP_POST_MERGE_HOOK=yes
	    fi
    fi
done
fi
}

DecompressExcel